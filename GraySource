-- Enhanced GrayUI Library with draggable and resizable features
local GrayUI = {}
GrayUI.__index = GrayUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

function GrayUI.new(title)
    local self = setmetatable({}, GrayUI)
    
    -- Constants
    local MIN_WIDTH = 250
    local MIN_HEIGHT = 200
    
    -- Main ScreenGui
    self.gui = Instance.new("ScreenGui")
    self.gui.Name = "GrayUI"
    self.gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.gui.Parent = game:GetService("CoreGui")
    
    -- Main Frame
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Name = "MainFrame"
    self.mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Position = UDim2.new(0.3, 0, 0.3, 0)
    self.mainFrame.Size = UDim2.new(0, 300, 0, 350)
    self.mainFrame.Parent = self.gui
    
    -- Add corner rounding to main frame
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 6)
    mainCorner.Parent = self.mainFrame
    
    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    titleBar.BorderSizePixel = 0
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.Parent = self.mainFrame
    
    -- Title Bar Corner (only top corners)
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 6)
    titleCorner.Parent = titleBar
    
    -- Fix bottom corners of title bar
    local titleBarStroke = Instance.new("UIStroke")
    titleBarStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    titleBarStroke.Color = Color3.fromRGB(50, 50, 50)
    titleBarStroke.LineJoinMode = Enum.LineJoinMode.Round
    titleBarStroke.Parent = titleBar
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Text = title or "GrayUI"
    titleLabel.Font = Enum.Font.GothamSemibold
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 16
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Size = UDim2.new(0, 200, 1, 0)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeBtn"
    minimizeBtn.Text = "_"
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeBtn.TextSize = 18
    minimizeBtn.BackgroundTransparency = 1
    minimizeBtn.Position = UDim2.new(1, -50, 0, 0)
    minimizeBtn.Size = UDim2.new(0, 25, 1, 0)
    minimizeBtn.Parent = titleBar
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseBtn"
    closeBtn.Text = "X"
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextSize = 16
    closeBtn.BackgroundTransparency = 1
    closeBtn.Position = UDim2.new(1, -25, 0, 0)
    closeBtn.Size = UDim2.new(0, 25, 1, 0)
    closeBtn.Parent = titleBar
    
    -- Resize Handle (bottom right corner)
    local resizeHandle = Instance.new("Frame")
    resizeHandle.Name = "ResizeHandle"
    resizeHandle.BackgroundTransparency = 1
    resizeHandle.Size = UDim2.new(0, 15, 0, 15)
    resizeHandle.Position = UDim2.new(1, -15, 1, -15)
    resizeHandle.Parent = self.mainFrame
    
    local resizeIcon = Instance.new("ImageLabel")
    resizeIcon.Name = "ResizeIcon"
    resizeIcon.Image = "rbxassetid://3926305904"
    resizeIcon.ImageRectOffset = Vector2.new(924, 724)
    resizeIcon.ImageRectSize = Vector2.new(36, 36)
    resizeIcon.BackgroundTransparency = 1
    resizeIcon.Size = UDim2.new(1, 0, 1, 0)
    resizeIcon.Parent = resizeHandle
    
    -- Tab Container
    self.tabContainer = Instance.new("Frame")
    self.tabContainer.Name = "TabContainer"
    self.tabContainer.BackgroundTransparency = 1
    self.tabContainer.Position = UDim2.new(0, 0, 0, 30)
    self.tabContainer.Size = UDim2.new(1, 0, 1, -30)
    self.tabContainer.Visible = true
    self.tabContainer.Parent = self.mainFrame
    
    -- Tab Buttons Container
    self.tabButtonsContainer = Instance.new("Frame")
    self.tabButtonsContainer.Name = "TabButtons"
    self.tabButtonsContainer.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    self.tabButtonsContainer.BorderSizePixel = 0
    self.tabButtonsContainer.Position = UDim2.new(0, 0, 0, 30)
    self.tabButtonsContainer.Size = UDim2.new(1, 0, 0, 30)
    self.tabButtonsContainer.Parent = self.mainFrame
    
    -- Tab Buttons
    self.tabs = {}
    self.currentTab = nil
    
    -- Minimize functionality
    minimizeBtn.MouseButton1Click:Connect(function()
        if self.mainFrame.Size.Y.Offset == 30 then
            -- Expand
            self.mainFrame.Size = UDim2.new(0, 300, 0, 350)
            self.tabContainer.Visible = true
            self.tabButtonsContainer.Visible = true
        else
            -- Minimize
            self.mainFrame.Size = UDim2.new(0, 300, 0, 30)
            self.tabContainer.Visible = false
            self.tabButtonsContainer.Visible = false
        end
    end)
    
    -- Close functionality
    closeBtn.MouseButton1Click:Connect(function()
        self:Destroy()
    end)
    
    -- Dragging functionality
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        
        -- Keep window within screen bounds
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local windowSize = self.mainFrame.AbsoluteSize
        
        newPos = UDim2.new(
            math.clamp(newPos.X.Scale, 0, 1 - (windowSize.X / viewportSize.X)),
            math.clamp(newPos.X.Offset, 0, viewportSize.X - windowSize.X),
            math.clamp(newPos.Y.Scale, 0, 1 - (windowSize.Y / viewportSize.Y)),
            math.clamp(newPos.Y.Offset, 0, viewportSize.Y - windowSize.Y)
        )
        
        self.mainFrame.Position = newPos
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
    
    -- Resizing functionality
    local resizing
    local resizeStart
    local startSize
    
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
            resizeStart = input.Position
            startSize = self.mainFrame.Size
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    resizing = false
                end
            end)
        end
    end)
    
    local function updateResize(input)
        local delta = input.Position - resizeStart
        local newSize = UDim2.new(
            startSize.X.Scale,
            math.max(MIN_WIDTH, startSize.X.Offset + delta.X),
            startSize.Y.Scale,
            math.max(MIN_HEIGHT, startSize.Y.Offset + delta.Y)
        )
        
        self.mainFrame.Size = newSize
        
        -- Keep window within screen bounds if dragging near edges
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local windowPos = self.mainFrame.AbsolutePosition
        local windowSize = self.mainFrame.AbsoluteSize
        
        if windowPos.X + windowSize.X > viewportSize.X then
            self.mainFrame.Position = UDim2.new(0, viewportSize.X - windowSize.X, self.mainFrame.Position.Y.Scale, self.mainFrame.Position.Y.Offset)
        end
        
        if windowPos.Y + windowSize.Y > viewportSize.Y then
            self.mainFrame.Position = UDim2.new(self.mainFrame.Position.X.Scale, self.mainFrame.Position.X.Offset, 0, viewportSize.Y - windowSize.Y)
        end
    end
    
    resizeHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and resizing then
            updateResize(input)
        end
    end)
    
    -- Change cursor when hovering resize handle
    resizeHandle.MouseEnter:Connect(function()
        game:GetService("GuiService"):SetCursor("SizeNWSE")
    end)
    
    resizeHandle.MouseLeave:Connect(function()
        game:GetService("GuiService"):SetCursor("Arrow")
    end)
    
    return self
end

-- [Rest of your existing GrayUI methods (Tab, Button, Toggle, etc.) can remain the same]
-- Just paste all your existing methods here...

return GrayUI
